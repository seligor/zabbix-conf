# This is a configuration file for Zabbix agent service (Windows)
# To get more information about Zabbix, visit http://www.zabbix.com

############ GENERAL PARAMETERS #################

### Option: LogType
#	Specifies where log messages are written to:
#		system  - Windows event log
#		file    - file specified with LogFile parameter
#		console - standard output
#
# Mandatory: no
# Default:
# LogType=file

### Option: LogFile
#	Log file name for LogType 'file' parameter.
#
# Mandatory: no
# Default:
# LogFile=

LogFile=c:\zabbix_agentd.log

### Option: LogFileSize
#	Maximum size of log file in MB.
#	0 - disable automatic log rotation.
#
# Mandatory: no
# Range: 0-1024
# Default:
# LogFileSize=1

### Option: DebugLevel
#	Specifies debug level:
#	0 - basic information about starting and stopping of Zabbix processes
#	1 - critical information
#	2 - error information
#	3 - warnings
#	4 - for debugging (produces lots of information)
#	5 - extended debugging (produces even more information)
#
# Mandatory: no
# Range: 0-5
# Default:
# DebugLevel=3

### Option: SourceIP
#	Source IP address for outgoing connections.
#
# Mandatory: no
# Default:
# SourceIP=

### Option: EnableRemoteCommands
#	Whether remote commands from Zabbix server are allowed.
#	0 - not allowed
#	1 - allowed
#
# Mandatory: no
# Default:
# EnableRemoteCommands=0

### Option: LogRemoteCommands
#	Enable logging of executed shell commands as warnings.
#	0 - disabled
#	1 - enabled
#
# Mandatory: no
# Default:
# LogRemoteCommands=0

##### Passive checks related

### Option: Server
#	List of comma delimited IP addresses, optionally in CIDR notation, or hostnames of Zabbix servers.
#	Incoming connections will be accepted only from the hosts listed here.
#	If IPv6 support is enabled then '127.0.0.1', '::127.0.0.1', '::ffff:127.0.0.1' are treated equally and '::/0' will allow any IPv4 or IPv6 address.
#	'0.0.0.0/0' can be used to allow any IPv4 address.
#	Example: Server=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.domain
#
# Mandatory: no
# Default:
# Server=

Server=10.10.200.4

### Option: ListenPort
#	Agent will listen on this port for connections from the server.
#
# Mandatory: no
# Range: 1024-32767
# Default:
# ListenPort=10050

### Option: ListenIP
#       List of comma delimited IP addresses that the agent should listen on.
#       First IP address is sent to Zabbix server if connecting to it to retrieve list of active checks.
#
# Mandatory: no
# Default:
# ListenIP=0.0.0.0

### Option: StartAgents
#	Number of pre-forked instances of zabbix_agentd that process passive checks.
#	If set to 0, disables passive checks and the agent will not listen on any TCP port.
#
# Mandatory: no
# Range: 0-100
# Default:
# StartAgents=3

##### Active checks related

### Option: ServerActive
#	List of comma delimited IP:port (or hostname:port) pairs of Zabbix servers for active checks.
#	If port is not specified, default port is used.
#	IPv6 addresses must be enclosed in square brackets if port for that host is specified.
#	If port is not specified, square brackets for IPv6 addresses are optional.
#	If this parameter is not specified, active checks are disabled.
#	Example: ServerActive=127.0.0.1:20051,zabbix.domain,[::1]:30051,::1,[12fc::1]
#
# Mandatory: no
# Default:
# ServerActive=

ServerActive=127.0.0.1

### Option: Hostname
#	Unique, case sensitive hostname.
#	Required for active checks and must match hostname as configured on the server.
#	Value is acquired from HostnameItem if undefined.
#
# Mandatory: no
# Default:
# Hostname=

Hostname=sec01

### Option: HostnameItem
#	Item used for generating Hostname if it is undefined. Ignored if Hostname is defined.
#	Does not support UserParameters or aliases.
#
# Mandatory: no
# Default:
# HostnameItem=system.hostname

### Option: HostMetadata
#	Optional parameter that defines host metadata.
#	Host metadata is used at host auto-registration process.
#	An agent will issue an error and not start if the value is over limit of 255 characters.
#	If not defined, value will be acquired from HostMetadataItem.
#
# Mandatory: no
# Range: 0-255 characters
# Default:
# HostMetadata=

### Option: HostMetadataItem
#	Optional parameter that defines an item used for getting host metadata.
#	Host metadata is used at host auto-registration process.
#	During an auto-registration request an agent will log a warning message if
#	the value returned by specified item is over limit of 255 characters.
#	This option is only used when HostMetadata is not defined.
#
# Mandatory: no
# Default:
# HostMetadataItem=

### Option: RefreshActiveChecks
#	How often list of active checks is refreshed, in seconds.
#
# Mandatory: no
# Range: 60-3600
# Default:
# RefreshActiveChecks=120

### Option: BufferSend
#	Do not keep data longer than N seconds in buffer.
#
# Mandatory: no
# Range: 1-3600
# Default:
# BufferSend=5

### Option: BufferSize
#	Maximum number of values in a memory buffer. The agent will send
#	all collected data to Zabbix server or Proxy if the buffer is full.
#
# Mandatory: no
# Range: 2-65535
# Default:
# BufferSize=100

### Option: MaxLinesPerSecond
#	Maximum number of new lines the agent will send per second to Zabbix Server
#	or Proxy processing 'log', 'logrt' and 'eventlog' active checks.
#	The provided value will be overridden by the parameter 'maxlines',
#	provided in 'log', 'logrt' or 'eventlog' item keys.
#
# Mandatory: no
# Range: 1-1000
# Default:
# MaxLinesPerSecond=20

############ ADVANCED PARAMETERS #################

### Option: Alias
#	Sets an alias for an item key. It can be used to substitute long and complex item key with a smaller and simpler one.
#	Multiple Alias parameters may be present. Multiple parameters with the same Alias key are not allowed.
#	Different Alias keys may reference the same item key.
#	For example, to retrieve paging file usage in percents from the server:
#	Alias=pg_usage:perf_counter[\Paging File(_Total)\% Usage]
#	Now shorthand key pg_usage may be used to retrieve data.
#	Aliases can be used in HostMetadataItem but not in HostnameItem or PerfCounter parameters.
#
# Mandatory: no
# Range:
# Default:

### Option: Timeout
#	Spend no more than Timeout seconds on processing.
#
# Mandatory: no
# Range: 1-30
# Default:
# Timeout=3

### Option: PerfCounter
#	Syntax: <parameter_name>,"<perf_counter_path>",<period>
#	Defines new parameter <parameter_name> which is an average value for system performance counter <perf_counter_path> for the specified time period <period> (in seconds).
#	For example, if you wish to receive average number of processor interrupts per second for last minute, you can define new parameter "interrupts" as following:
#	PerfCounter = interrupts,"\Processor(0)\Interrupts/sec",60
#	Please note double quotes around performance counter path.
#	Samples for calculating average value will be taken every second.
#	You may run "typeperf -qx" to get list of all performance counters available in Windows.
#
# Mandatory: no
# Range:
# Default:

#	CPU metrics
PerfCounter = CPU_Interrupts,"\238(_Total)\148",60
PerfCounter = CPU_Utilization_percent,"\4674(_Total)\4728", 60
PerfCounter = CPU_Idle_Break_Events,"\4674(_Total)\4722", 60
PerfCounter = CPU_Avg_Idle_Time,"\4674(_Total)\4718", 60
PerfCounter = CPU_Clock_Interrupts,"\4674(_Total)\4716", 60
#PerfCounter = CPU_Total_Time,"\4674(_Total)\6", 60  ERROR

#	RAM metrics
PerfCounter = Memory_available_Mbytes, "\4\24", 60
#PerfCounter = Memory_committed, "\4\26", 60 ERROR

#	Disks metrics
PerfCounter = System_Disk_Activity_Written_bytes,"\4938(*)\4942", 60
PerfCounter = System_Disk_Activity_Read_bytes,"\4938(*)\4940", 60
PerfCounter = C_Disk_Queue_len,"\236(C:)\198", 60
 #INCERT DISK NAME
PerfCounter = E_Disk_Queue_len,"\236(E:)\198", 60
 #INSERT DISK NAME
PerfCounter = Physical_Disk_Queue_len,"\234(0 C: E:)\198", 60
 #INSERT DISK NAME
PerfCounter = Disks_IO_split,"\234(0 C: E:)\1484", 60
PerfCounter = Free_space_on_C_disk,"\236(C:)\408", 60
PerfCounter = Free_space_on_E_disk,"\236(E:)\408", 60

#   Network metrics
PerfCounter = TCPv4_Established,"\638\642", 60
PerfCounter = TCPv4_Failures,"\638\648", 60
PerfCounter = TCPv4_Connections_RST,"\638\650", 60
PerfCounter = UDP_Received,"\658\446", 60
PerfCounter = UDP_Sent,"\658\442", 60
PerfCounter = UDP_Errors,"\658\666", 60

#	OS	metrics
PerfCounter = System_File_Read_Ops,"\2\10", 60
PerfCounter = System_File_Write_Ops,"\2\12", 60
PerfCounter = System_Context_Switches, "\2\146", 60
PerfCounter = System_Calls, "\2\150", 60
PerfCounter = System_Processes,"\2\248", 60
PerfCounter = System_Threads,"\2\250", 60

#	SecureTower metrics
PerfCounter = ST_Indexer_CPU_Time, "\230(FgStSearchSvc)\6", 60
#4676
PerfCounter = ST_Indexer_Thread_Count, "\230(FgSearcherProc)\680", 60
PerfCounter = ST_FgStSearchSvc_IOPS, "\230(FgStSearchSvc)\1416", 60
PerfCounter = ST_FgStSearchSvc_Read_Ops, "\230(FgStSearchSvc)\1412", 60
PerfCounter = ST_FG_Searcher_IOPS, "\230(FgSearcherProc)\1416", 60
PerfCounter = ST_FG_Searcher_Proc_Read_Ops, "\230(FgSearcherProc)\1412", 60
PerfCounter = ST_FG_Searcher_Proc_Write_Ops, "\230(FgSearcherProc)\1414", 60
PerfCounter = ST_Security_Center_CPU_Time, "\230(FalconGaze.SecureTower.SecurityCenterServer)\6", 60
#4676
PerfCounter = ST_Security_Center_Thread_count, "\230(FalconGaze.SecureTower.SecurityCenterServer)\680", 60
PerfCounter = ST_Security_IOPS, "\230(FalconGaze.SecureTower.SecurityCenterServer)\1416", 60
PerfCounter = ST_Security_Read_Ops, "\230(FalconGaze.SecureTower.SecurityCenterServer)\1412", 60
PerfCounter = ST_Security_Write_Ops, "\230(FalconGaze.SecureTower.SecurityCenterServer)\1414", 60
# 
PerfCounter = ST_Database_Cache_IOPS, "\230(FgDatabaseCacheProc)\1416", 60
PerfCounter = ST_Database_Cache_Read_Ops, "\230(FgDatabaseCacheProc)\1412", 60
PerfCounter = ST_Database_Cache_Write_Ops, "\230(FgDatabaseCacheProc)\1414", 60
# 
PerfCounter = ST_Speech_Server_CPU_Time, "\230(SpeechServer)\6", 60
#4676
PerfCounter = ST_Server_CPU_Time, "\230(SecureTowerServer)\6", 60
#4676
PerfCounter = ST_Server_Thread_Count, "\230(SecureTowerServer)\680", 60
PerfCounter = ST_Server_IOPS, "\230(SecureTowerServer)\1416", 60
PerfCounter = ST_Server_Read_Ops, "\230(SecureTowerServer)\1412", 60
PerfCounter = ST_Server_Write_Ops, "\230(SecureTowerServer)\1414", 60

#   SecureTower Processes RAM
 
PerfCounter = ST_FgSearcherProc_Private_bytes, "\230(FgSearcherProc)\186", 60
PerfCounter = ST_FgStSearchSvc_Private_bytes, "\230(FgStSearchSvc)\186", 60
PerfCounter = ST_FgDfpProc_Private_bytes, "\230(FgDfpProc)\186", 60
PerfCounter = ST_FgDatabaseCacheProc_Private_bytes, "\230(FgDatabaseCacheProc)\186", 60
PerfCounter = ST_InvestigationCenterServer_Private_bytes, "\230(FalconGaze.SecureTower.InvestigationCenterServer)\186", 60
PerfCounter = ST_SecurityCenterServer_Private_bytes, "\230(FalconGaze.SecureTower.SecurityCenterServer)\186", 60
PerfCounter = ST_SpeechServer_Private_bytes, "\230(SpeechServer)\186", 60
PerfCounter = ST_FgstIcapServer_Private_bytes, "\230(FgstIcapServer)\186", 60
PerfCounter = ST_UsersAuthServer_Private_bytes, "\230(FalconGaze.SecureTower.UsersAuthServer)\186", 60
PerfCounter = ST_MailProcessingServer_Private_bytes, "\230(FalconGaze.SecureTower.MailProcessingServer)\186", 60
PerfCounter = ST_EndPointAgentControlServer_Private_bytes, "\230(FalconGaze.SecureTower.EndPointAgentControlServer)\186", 60


PerfCounter = ST_SecureTowerServer_Private_bytes, "\230(SecureTowerServer)\180", 60
#Working set? 
PerfCounter = ST_EndPointAgentControlServer_Working_set, "\230(FalconGaze.SecureTower.EndPointAgentControlServer)\180", 60
PerfCounter = ST_AdminConsole_Working_set, "\230(FalconGaze.SecureTower.AdminConsole)\180", 60
PerfCounter = ST_SearchClient_Working_set, "\230(FalconGaze.SecureTower.SearchClient)\180", 60
PerfCounter = ST_FgSearcherProc_Working_set, "\230(FgSearcherProc)\180", 60
PerfCounter = ST_FgSearcherProc_Working_set, "\230(FgDfpProc)\180", 60
PerfCounter = ST_UsersAuthServer_Working_set, "\230(FalconGaze.SecureTower.UsersAuthServer)\180", 60
PerfCounter = ST_SpeechServer_Working_set, "\230(SpeechServer)\180", 60
PerfCounter = ST_FgDatabaseCacheProc_Working_set, "\230(FgDatabaseCacheProc)\180", 60
PerfCounter = ST_SecurityCenterServer_Working_set, "\230(FalconGaze.SecureTower.SecurityCenterServer)\180", 60
PerfCounter = ST_FgStSearchSvc_Working_set, "\230(FgstIcapServer)\180", 60
PerfCounter = ST_InvestigationCenterServer_Working_set, "\230(FalconGaze.SecureTower.InvestigationCenterServer)\180", 60
PerfCounter = ST_MailProcessingServer_Working_set, "\230(FalconGaze.SecureTower.MailProcessingServer)\180", 60

#   SecureTower CPU time
PerfCounter = ST_Indexer_CPU_Time, "\230(FgStSearchSvc)\6", 60
PerfCounter = ST_Security_Center_CPU_Time, "\230(FalconGaze.SecureTower.SecurityCenterServer)\6", 60
PerfCounter = ST_Speech_Server_CPU_Time, "\230(SpeechServer)\6", 60
PerfCounter = ST_Server_CPU_Time, "\230(SecureTowerServer)\6", 60
PerfCounter = ST_EndPointAgentControlServer_CPU_time, "\230(FalconGaze.SecureTower.EndPointAgentControlServer)\6", 60
PerfCounter = ST_AdminConsole_CPU_time, "\230(FalconGaze.SecureTower.AdminConsole)\6", 60
PerfCounter = ST_SearchClient_CPU_time, "\230(FalconGaze.SecureTower.SearchClient)\6", 60
PerfCounter = ST_FgSearcherProc_CPU_time, "\230(FgSearcherProc)\6", 60
PerfCounter = ST_FgSearcherProc_CPU_time, "\230(FgDfpProc)\6", 60
PerfCounter = ST_UsersAuthServer_CPU_time, "\230(FalconGaze.SecureTower.UsersAuthServer)\6", 60
PerfCounter = ST_FgDatabaseCacheProc_CPU_time, "\230(FgDatabaseCacheProc)\6", 60
PerfCounter = ST_FgStSearchSvc_CPU_time, "\230(FgstIcapServer)\6", 60
PerfCounter = ST_InvestigationCenterServer_CPU_time, "\230(FalconGaze.SecureTower.InvestigationCenterServer)\6", 60
PerfCounter = ST_MailProcessingServer_CPU_time, "\230(FalconGaze.SecureTower.MailProcessingServer)\6", 60

#   PostgreSQL metrics
PerfCounter = PGSQL_CPU_Time,"\230(postgres)\6",60
#4676
PerfCounter = PGSQL_IOPS,"\230(postgres)\1416",60
PerfCounter = PGSQL_Write_Ops,"\230(postgres)\1414",60
PerfCounter = PGSQL_Private_bytes,"\230(postgres)\186",60
PerfCounter = PGSQL_Working_set,"\230(postgres)\180",60

#	Other objects metrics
#PerfCounter = Processes,"\Objects\Processes", 360
#PerfCounter = Threads,"\Objects\Threads", 60

PerfCounter = Paging_file_usage,"\Paging File(_Total)\% Usage", 60
#   \Process(nxlog)\Private Bytes
#   \Process(nxlog)\Working Set

### Option: Include
#	You may include individual files in the configuration file.
#
# Mandatory: no
# Default:
# Include=

# Include=c:\zabbix\zabbix_agentd.userparams.conf
# Include=c:\zabbix\zabbix_agentd.conf.d\
# Include=c:\zabbix\zabbix_agentd.conf.d\*.conf

####### USER-DEFINED MONITORED PARAMETERS #######

### Option: UnsafeUserParameters
#	Allow all characters to be passed in arguments to user-defined parameters.
#	The following characters are not allowed:
#	\ ' " ` * ? [ ] { } ~ $ ! & ; ( ) < > | # @
#	Additionally, newline characters are not allowed.
#	0 - do not allow
#	1 - allow
#
# Mandatory: no
# Range: 0-1
# Default:
# UnsafeUserParameters=0

### Option: UserParameter
#	User-defined parameter to monitor. There can be several user-defined parameters.
#	Format: UserParameter=<key>,<shell command>
#
# Mandatory: no
# Default:
# UserParameter=

####### TLS-RELATED PARAMETERS #######

### Option: TLSConnect
#	How the agent should connect to server or proxy. Used for active checks.
#	Only one value can be specified:
#		unencrypted - connect without encryption
#		psk         - connect using TLS and a pre-shared key
#		cert        - connect using TLS and a certificate
#
# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)
# Default:
# TLSConnect=unencrypted

### Option: TLSAccept
#	What incoming connections to accept.
#	Multiple values can be specified, separated by comma:
#		unencrypted - accept connections without encryption
#		psk         - accept connections secured with TLS and a pre-shared key
#		cert        - accept connections secured with TLS and a certificate
#
# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)
# Default:
# TLSAccept=unencrypted

### Option: TLSCAFile
#	Full pathname of a file containing the top-level CA(s) certificates for
#	peer certificate verification.
#
# Mandatory: no
# Default:
# TLSCAFile=

### Option: TLSCRLFile
#	Full pathname of a file containing revoked certificates.
#
# Mandatory: no
# Default:
# TLSCRLFile=

### Option: TLSServerCertIssuer
#      Allowed server certificate issuer.
#
# Mandatory: no
# Default:
# TLSServerCertIssuer=

### Option: TLSServerCertSubject
#      Allowed server certificate subject.
#
# Mandatory: no
# Default:
# TLSServerCertSubject=

### Option: TLSCertFile
#	Full pathname of a file containing the agent certificate or certificate chain.
#
# Mandatory: no
# Default:
# TLSCertFile=

### Option: TLSKeyFile
#	Full pathname of a file containing the agent private key.
#
# Mandatory: no
# Default:
# TLSKeyFile=

### Option: TLSPSKIdentity
#	Unique, case sensitive string used to identify the pre-shared key.
#
# Mandatory: no
# Default:
# TLSPSKIdentity=

### Option: TLSPSKFile
#	Full pathname of a file containing the pre-shared key.
#
# Mandatory: no
# Default:
# TLSPSKFile=
